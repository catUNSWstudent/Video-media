And P<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beam Wellbeing Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Firebase SDKs -->
    <script type="module">
        // Import Firebase modules from CDN. Using version 10.12.4 for consistency and stability.
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut, createUserWithEmailAndPassword, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc, onSnapshot, collection, query, where, addDoc, getDocs } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore.js";

        // Global Firebase variables to make them accessible throughout the application
        window.firebaseApp = null;
        window.db = null;
        window.auth = null;
        window.currentUserId = null;
        window.currentUserName = null;
        window.isAuthReady = false; // Flag to indicate Firebase authentication state is ready
        window.isAuthenticated = false; // Flag to indicate if a user is explicitly authenticated (not anonymous)

        document.addEventListener('DOMContentLoaded', async () => {
            // Retrieve app ID and Firebase config from the environment
            const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};

            // Initialize Firebase only if configuration is available
            if (Object.keys(firebaseConfig).length > 0) {
                window.firebaseApp = initializeApp(firebaseConfig);
                window.db = getFirestore(window.firebaseApp);
                window.auth = getAuth(window.firebaseApp);

                // Listen for authentication state changes
                onAuthStateChanged(window.auth, async (user) => {
                    if (user) {
                        // User is signed in
                        window.currentUserId = user.uid;
                        window.isAuthenticated = !user.isAnonymous; // Check if it's an anonymous user
                        console.log("Firebase Auth Ready. User ID:", window.currentUserId, "Authenticated:", window.isAuthenticated);

                        // Attempt to load user name from localStorage, specific to the current user ID
                        window.currentUserName = localStorage.getItem(`beam_username_${window.currentUserId}`);
                        // If user name is not found, it will be prompted in the step challenge view logic

                        window.isAuthReady = true; // Set auth ready flag
                        // Dispatch a custom event to notify other parts of the app that Firebase Auth is ready
                        document.dispatchEvent(new CustomEvent('firebaseAuthReady'));

                        // If user just logged in/signed up, redirect to dashboard
                        if (window.isAuthenticated && window.location.hash.includes('auth')) {
                            window.location.hash = '#dashboard';
                        }


                    } else {
                        // No user is signed in, attempt anonymous sign-in for initial access
                        console.log("No user signed in. Signing in anonymously...");
                        try {
                            if (typeof __initial_auth_token !== 'undefined') {
                                await signInWithCustomToken(window.auth, __initial_auth_token);
                            } else {
                                await signInAnonymously(window.auth);
                            }
                        } catch (error) {
                            console.error("Error during anonymous sign-in:", error);
                        }
                        window.isAuthReady = true;
                        window.isAuthenticated = false;
                        document.dispatchEvent(new CustomEvent('firebaseAuthReady'));
                    }
                });
            } else {
                console.warn("Firebase config not found. Firestore features will be disabled.");
            }
        });
    </script>
    <!-- Chosen Palette: Beam UI Palette (Light Lavender, Purple, Yellow, Green) -->
    <!-- Application Structure Plan: A single-page dashboard application with six switchable views: 'Dashboard', 'Check-in', 'Companion', 'Calm Space', 'Step Challenge', and 'Settings'. The Settings view now includes a 'Profile Settings' sub-page and a new 'Data & Privacy Settings' sub-page for managing comprehensive privacy controls. The initial 'Privacy Consent' modal for the Companion remains for first-time opt-in. A new 'Landing Page' is the entry point, leading to an 'Authentication/Login Page' for explicit user management. -->
    <!-- Visualization & Content Choices: Metrics -> Inform -> Styled Cards -> No interaction -> Tailwind CSS. Weekly Trends -> Change/Compare -> Line Chart -> Hover tooltips -> Chart.js (Canvas). Personal Insights -> Inform -> Styled Text Blocks -> No interaction -> Tailwind CSS. Score Analysis -> Inform/Synthesize -> Button triggers LLM text generation -> LLM response displayed in modal -> Gemini API + Vanilla JS. Check-in Form -> Collect Data -> Multi-step form with sliders and textarea -> User input saved to Firestore -> Tailwind CSS + Vanilla JS + Firestore. Companion Chat -> Interact/Reflect -> Chat Interface -> User input triggers API call -> Gemini API + Vanilla JS. Calm Space Videos -> Inform -> Image placeholders -> No interaction (awaiting video URLs) -> Tailwind CSS. Journaling Area (Calm Space) -> Reflect -> Textarea with Save button + Time-sensitive emoji prompts -> User input/storage (static for now) + LLM for prompts -> Tailwind CSS + Vanilla JS + Gemini API. Step Input -> User input field + button -> Direct interaction -> Vanilla JS + Firestore. My Weekly Steps -> Display text -> Inform -> Vanilla JS + Firestore aggregation. Leaderboard -> Dynamic list/table -> Compare/Inform -> Vanilla JS + Firestore `onSnapshot` for real-time updates. Privacy Consent (Modal) -> Gatekeeping/Inform -> Modal with text and buttons -> User decision stored in localStorage -> Tailwind CSS + Vanilla JS. Settings View -> Configure App -> Various sections with interactive toggles and links -> User preferences stored in localStorage -> Tailwind CSS + Vanilla JS. Profile Settings View -> Manage Profile -> Display and edit user name, show static email/member info -> User input saved to localStorage -> Tailwind CSS + Vanilla JS. Data Privacy Settings View -> Manage Privacy -> Comprehensive privacy controls including data sharing, health connect, and data management -> User interaction affects localStorage -> Tailwind CSS + Vanilla JS. Landing Page -> Entry Point -> Marketing content, call to action for login/dashboard -> Tailwind CSS. Auth Page -> User Management -> Login/Signup forms with email/password, error handling -> Firebase Auth + Tailwind CSS + Vanilla JS. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f5f3ff; /* Light Lavender */
        }
        body.dark-mode {
            background-color: #1a202c; /* Dark background */
            color: #e2e8f0; /* Light text */
        }
        body.dark-mode .metric-card {
            background-color: #2d3748; /* Darker card background */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -2px rgba(0, 0, 0, 0.2);
        }
        body.dark-mode .bg-white {
            background-color: #2d3748;
        }
        body.dark-mode .text-gray-800 {
            color: #e2e8f0;
        }
        body.dark-mode .text-gray-900 {
            color: #f7fafc;
        }
        body.dark-mode .text-gray-600 {
            color: #a0aec0;
        }
        body.dark-mode .text-gray-500 {
            color: #718096;
        }
        body.dark-mode .border-r {
            border-color: #4a5568;
        }
        body.dark-mode .border-b {
            border-color: #4a5568;
        }
        body.dark-mode .nav-link.active {
            background-color: #4a5568;
            color: #cbd5e0;
        }
        body.dark-mode .chat-bubble-bot {
            background-color: #4a5568;
            color: #e2e8f0;
        }
        body.dark-mode .chat-input,
        body.dark-mode textarea,
        body.dark-mode input[type="text"],
        body.dark-mode input[type="number"],
        body.dark-mode input[type="email"],
        body.dark-mode input[type="password"] {
            background-color: #1a202c;
            border-color: #4a5568;
            color: #e2e8f0;
        }
        body.dark-mode .modal-content {
            background-color: #2d3748;
            color: #e2e8f0;
        }
        body.dark-mode .modal-close-btn {
            color: #a0aec0;
        }
        body.dark-mode .video-placeholder-container {
            background-color: #2d3748;
            border-color: #4a5568;
            color: #a0aec0;
        }
        body.dark-mode .reflection-block {
            background-color: #2d3748;
        }
        body.dark-mode .leaderboard-item {
            background-color: #4a5568;
        }
        body.dark-mode .bg-gray-50 {
            background-color: #1a202c;
        }
        body.dark-mode .bg-gray-200 { /* For progress bar track */
            background-color: #4a5568;
        }
        body.dark-mode .bg-gray-300 { /* For decline button */
            background-color: #4a5568;
            color: #e2e8f0;
        }
        body.dark-mode .bg-gray-300:hover {
            background-color: #6a7486;
        }


        .metric-card {
            background-color: white;
            border-radius: 1.5rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .metric-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
        }
        .progress-bar {
            background-color: #e5e7eb;
            border-radius: 9999px;
            height: 0.5rem;
            overflow: hidden;
        }
        .progress-bar-inner {
            background-color: #8b5cf6; /* Purple */
            height: 100%;
            border-radius: 9999px;
        }
        .tag {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        .tag-yellow { background-color: #fef9c3; color: #ca8a04; }
        .tag-green { background-color: #dcfce7; color: #16a34a; }
        .tag-blue { background-color: #dbeafe; color: #2563eb; }
        .nav-link {
            cursor: pointer;
            transition: background-color 0.2s, color 0.2s;
            border-radius: 0.75rem;
        }
        .nav-link.active {
            background-color: #ede9fe;
            color: #5b21b6;
            font-weight: 600;
        }
        .nav-link.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 40vh;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
            }
        }
        .chat-bubble {
            max-width: 80%;
            padding: 0.75rem 1rem;
            border-radius: 1.25rem;
        }
        .chat-bubble-user {
            background-color: #8b5cf6;
            color: white;
            border-bottom-right-radius: 0.25rem;
        }
        .chat-bubble-bot {
            background-color: #e5e7eb;
            color: #1f2937;
            border-bottom-left-radius: 0.25rem;
        }
        .chat-input:focus {
            outline: none;
            box-shadow: 0 0 0 2px #a78bfa;
            border-color: #8b5cf6;
        }

        /* Modal Styles */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 1.5rem;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            position: relative;
        }
        .modal-close-btn {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6b7280;
        }

        /* Video Placeholder Styling */
        .video-placeholder-img {
            width: 100%;
            height: 100%;
            object-fit: cover; /* Ensures image covers the area */
            border-radius: 0.75rem; /* Matches card border-radius */
        }
        .video-placeholder-container {
            background-color: #e0e7ff; /* Light blue/purple tint */
            border-radius: 1rem;
            min-height: 150px; /* Smaller min-height for responsiveness */
            height: 100%; /* Take full height of parent flex item */
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 1rem;
            color: #4c1d95; /* Darker purple */
            font-weight: 600;
            font-size: 1.1rem;
            border: 2px dashed #a78bfa;
            overflow: hidden; /* Ensure image doesn't overflow */
        }
        @media (min-width: 768px) {
            .video-placeholder-container {
                min-height: 200px;
            }
        }

        /* Time-of-Day Reflection Block */
        .reflection-block {
            background-color: white;
            border-radius: 1.5rem;
            padding: 1.5rem;
            box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            margin-bottom: 1.5rem;
            text-align: center;
        }
        .emoji-button {
            background: none;
            border: none;
            font-size: 2.5rem;
            cursor: pointer;
            padding: 0.5rem;
            transition: transform 0.2s ease-in-out;
        }
        .emoji-button:hover {
            transform: scale(1.1);
        }

        /* Check-in specific styles */
        .check-in-container {
            max-width: 700px;
            margin: 0 auto;
        }
        .slider-value {
            font-size: 3rem;
            font-weight: bold;
            color: #8b5cf6;
            margin-bottom: 1rem;
        }
        input[type="range"] {
            -webkit-appearance: none;
            width: 100%;
            height: 10px;
            background: linear-gradient(to right, #a78bfa, #fcd34d); /* Purple to Yellow gradient */
            border-radius: 5px;
            outline: none;
            transition: opacity .2s;
        }
        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 25px;
            height: 25px;
            background: #8b5cf6; /* Purple thumb */
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        input[type="range"]::-moz-range-thumb {
            width: 25px;
            height: 25px;
            background: #8b5cf6;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        /* Toggle Switch Styles */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 48px; /* Wider for better touch target */
            height: 28px; /* Taller */
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 28px; /* Half of height for full roundness */
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 20px; /* Smaller than slider height */
            width: 20px; /* Smaller than slider width */
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #8b5cf6; /* Purple when checked */
        }
        input:focus + .slider {
            box-shadow: 0 0 1px #8b5cf6;
        }
        input:checked + .slider:before {
            transform: translateX(20px); /* Move thumb to right */
        }
        /* Rounded sliders */
        .slider.round {
            border-radius: 28px;
        }
        .slider.round:before {
            border-radius: 50%;
        }

        /* Profile Avatar Placeholder */
        .profile-avatar {
            width: 80px;
            height: 80px;
            background-color: #ddd6fe; /* Light purple */
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            font-weight: bold;
            color: #5b21b6; /* Darker purple */
            margin-bottom: 1rem;
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="flex h-screen bg-gray-50">
        <!-- Sidebar Navigation -->
        <aside class="hidden md:flex flex-col w-64 bg-white border-r">
            <div class="flex items-center justify-center h-20 border-b">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 rounded-full bg-gradient-to-br from-purple-400 to-yellow-300 flex items-center justify-center">
                        <span class="text-white text-xl font-bold">✧</span>
                    </div>
                    <span class="text-2xl font-bold text-gray-800">Beam</span>
                </div>
            </div>
            <nav class="flex-1 px-4 py-6 space-y-2">
                <a id="nav-dashboard" class="nav-link active flex items-center px-4 py-3">
                    <span class="text-xl mr-3">📊</span> Dashboard
                </a>
                <a id="nav-check-in" class="nav-link flex items-center px-4 py-3">
                    <span class="text-xl mr-3">❤️</span> Check-in
                </a>
                <a id="nav-companion" class="nav-link flex items-center px-4 py-3">
                    <span class="text-xl mr-3">💬</span> Companion
                </a>
                <a id="nav-calm-space" class="nav-link flex items-center px-4 py-3">
                    <span class="text-xl mr-3">🧘‍♀️</span> Calm Space
                </a>
                <a id="nav-step-challenge" class="nav-link flex items-center px-4 py-3">
                    <span class="text-xl mr-3">👟</span> Step Challenge
                </a>
                <a id="nav-settings" class="nav-link flex items-center px-4 py-3">
                    <span class="text-xl mr-3">⚙️</span> Settings
                </a>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="flex-1 flex flex-col overflow-hidden">
            <header class="md:hidden flex items-center justify-between p-4 bg-white border-b">
                 <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 rounded-full bg-gradient-to-br from-purple-400 to-yellow-300 flex items-center justify-center">
                        <span class="text-white text-xl font-bold">✧</span>
                    </div>
                    <span class="text-2xl font-bold text-gray-800">Beam</span>
                </div>
                <div>
                    <select id="mobile-nav" class="rounded-lg border-gray-300 focus:ring-purple-500 focus:border-purple-500">
                        <option value="dashboard">Dashboard</option>
                        <option value="check-in">Check-in</option>
                        <option value="companion">Companion</option>
                        <option value="calm-space">Calm Space</option>
                        <option value="step-challenge">Step Challenge</option>
                        <option value="settings">Settings</option>
                    </select>
                </div>
            </header>

            <!-- Landing Page View -->
            <div id="landingPageView" class="flex-1 flex flex-col items-center justify-center p-6 md:p-10 text-center bg-gradient-to-br from-purple-100 to-yellow-100">
                <div class="max-w-3xl mx-auto">
                    <div class="flex items-center justify-center mb-6">
                        <div class="w-20 h-20 rounded-full bg-gradient-to-br from-purple-400 to-yellow-300 flex items-center justify-center">
                            <span class="text-white text-4xl font-bold">✧</span>
                        </div>
                        <span class="text-5xl font-bold text-gray-900 ml-4">Beam</span>
                    </div>
                    <h1 class="text-4xl md:text-5xl font-bold text-gray-900 leading-tight">Welcome to Beam</h1>
                    <p class="mt-4 text-lg md:text-xl text-gray-700 leading-relaxed">
                        Your reflective companion for psychosocial safety and equity. Fostering dignified, trauma-informed experiences that support both individual wellbeing and organizational transformation.
                    </p>
                    <div class="mt-8 space-y-4 sm:space-y-0 sm:space-x-4 flex flex-col sm:flex-row justify-center">
                        <button id="startCheckInLandingBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-8 rounded-full shadow-lg transition-all duration-300 ease-in-out">
                            Start Your Check-in
                        </button>
                        <button id="viewDashboardLandingBtn" class="bg-white hover:bg-gray-100 text-purple-700 font-bold py-3 px-8 rounded-full shadow-lg border border-purple-200 transition-all duration-300 ease-in-out">
                            View Dashboard
                        </button>
                    </div>

                    <div class="mt-16 pt-8 border-t border-purple-200">
                        <h2 class="text-3xl font-bold text-gray-900 mb-6">Illuminate Your Path to Wellbeing</h2>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                            <div class="p-6 bg-white rounded-2xl shadow-md">
                                <h3 class="text-xl font-semibold text-purple-700 mb-3">Deep Integration</h3>
                                <p class="text-gray-600">
                                    Beam integrates reflective practices with equity and psychosocial safety principles, offering tools and insights to create safer, more inclusive environments and data-driven approaches to building more equitable workplaces.
                                </p>
                            </div>
                            <div class="p-6 bg-white rounded-2xl shadow-md">
                                <h3 class="text-xl font-semibold text-purple-700 mb-3">Daily Reflections</h3>
                                <p class="text-gray-600">
                                    Gentle prompts to nurture self-awareness and emotional wellbeing, alongside tools and insights to create safer, more inclusive environments and data-driven approaches to building more equitable workplaces.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Authentication View (Login/Signup) -->
            <div id="authView" class="hidden flex-1 flex flex-col items-center justify-center p-6 md:p-10 bg-gradient-to-br from-purple-100 to-yellow-100">
                <div class="max-w-md w-full bg-white rounded-2xl p-8 shadow-xl text-center">
                    <h2 id="authTitle" class="text-3xl font-bold text-gray-900 mb-6">Login to Beam</h2>
                    <p id="authError" class="text-red-500 mb-4 hidden"></p>
                    <form id="authForm" class="space-y-6">
                        <div>
                            <label for="authEmail" class="sr-only">Email</label>
                            <input type="email" id="authEmail" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Email address" required>
                        </div>
                        <div>
                            <label for="authPassword" class="sr-only">Password</label>
                            <input type="password" id="authPassword" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Password" required>
                        </div>
                        <div id="authDisplayNameGroup" class="hidden">
                            <label for="authDisplayName" class="sr-only">Display Name</label>
                            <input type="text" id="authDisplayName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Display Name (for leaderboard)">
                        </div>
                        <button type="submit" id="authSubmitBtn" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out">
                            Login
                        </button>
                    </form>
                    <div class="mt-6 text-sm text-gray-600">
                        <span id="authToggleText">Don't have an account?</span>
                        <button id="authToggleButton" class="text-purple-600 hover:text-purple-800 font-semibold ml-1">Sign Up</button>
                    </div>
                     <div class="mt-4 text-sm text-gray-600">
                        <button id="continueAsGuestBtn" class="text-blue-500 hover:text-blue-700 underline">Continue as Guest</button>
                    </div>
                </div>
            </div>

            <!-- Dashboard View -->
            <div id="dashboardView" class="hidden flex-1 overflow-y-auto p-6 md:p-10">
                <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Your Wellbeing Dashboard</h1>
                <p class="mt-2 text-gray-600">Track your journey toward psychological safety and equity.</p>
                <p class="text-sm text-gray-500 mt-1" id="dashboardLastUpdated">Last updated: Today, 30/07/2025</p>

                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
                    <!-- Wellbeing Score Card -->
                    <div class="metric-card">
                        <div class="flex justify-between items-start">
                            <h2 class="text-lg font-semibold text-gray-700">Wellbeing Score</h2>
                            <span class="tag tag-yellow" id="wellbeingChange">+0.0 this week</span>
                        </div>
                        <p class="text-4xl font-bold mt-4"><span id="wellbeingScore">0.0</span> <span class="text-2xl text-gray-500">/ 10</span></p>
                        <div class="progress-bar mt-4">
                            <div class="progress-bar-inner" style="width: 0%;" id="wellbeingProgressBar"></div>
                        </div>
                    </div>
                    <!-- Psychological Safety Card -->
                    <div class="metric-card">
                        <div class="flex justify-between items-start">
                            <h2 class="text-lg font-semibold text-gray-700">Psychological Safety</h2>
                             <span class="tag tag-yellow" id="safetyChange">+0.0 this week</span>
                        </div>
                        <p class="text-4xl font-bold mt-4"><span id="safetyScore">0.0</span> <span class="text-2xl text-gray-500">/ 10</span></p>
                        <div class="progress-bar mt-4">
                            <div class="progress-bar-inner" style="width: 0%;" id="safetyProgressBar"></div>
                        </div>
                    </div>
                    <!-- Inclusion Index Card -->
                    <div class="metric-card">
                        <div class="flex justify-between items-start">
                            <h2 class="text-lg font-semibold text-gray-700">Inclusion Index</h2>
                             <span class="tag tag-yellow" id="inclusionChange">+0.0 this week</span>
                        </div>
                        <p class="text-4xl font-bold mt-4"><span id="inclusionScore">0.0</span> <span class="text-2xl text-gray-500">/ 10</span></p>
                        <div class="progress-bar mt-4">
                            <div class="progress-bar-inner" style="width: 0%;" id="inclusionProgressBar"></div>
                        </div>
                    </div>
                </div>

                <!-- Analyze Scores Button -->
                <div class="mt-8 text-center">
                    <button id="analyzeScoresBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out">
                        Analyze My Scores ✨
                    </button>
                    <div id="analysisLoading" class="hidden mt-4 text-purple-600">Loading analysis...</div>
                </div>

                <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-8">
                    <div class="lg:col-span-2 metric-card">
                        <h2 class="text-xl font-bold mb-4">Weekly Trends</h2>
                        <div class="chart-container">
                            <canvas id="weeklyTrendsChart"></canvas>
                        </div>
                    </div>
                    <div class="metric-card">
                        <h2 class="text-xl font-bold mb-4">✧ Personal Insights</h2>
                        <div class="space-y-6">
                            <div>
                                <div class="flex justify-between items-center">
                                    <h3 class="font-semibold">Positive Trend</h3>
                                    <span class="tag tag-green">Improving</span>
                                </div>
                                <p class="text-sm text-gray-600 mt-1">Your wellbeing scores have improved by 15% this month.</p>
                            </div>
                            <div>
                                <div class="flex justify-between items-center">
                                    <h3 class="font-semibold">Reflection Consistency</h3>
                                    <span class="tag tag-blue">Consistent</span>
                                </div>
                                <p class="text-sm text-gray-600 mt-1">You've completed 6 out of 7 check-ins this week.</p>
                            </div>
                            <div>
                                <div class="flex justify-between items-center">
                                    <h3 class="font-semibold">Areas of Growth</h3>
                                    <span class="tag tag-yellow">Opportunity</span>
                                </div>
                                <p class="text-sm text-gray-600 mt-1">Consider exploring community connection opportunities.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Check-in View -->
            <div id="checkInView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-hidden">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Daily Check-in</h1>
                    <p class="mt-2 text-gray-600">Take a moment to check in with yourself.</p>
                </div>

                <div class="check-in-container metric-card flex-1 flex flex-col justify-between">
                    <!-- Progress Bar -->
                    <div class="w-full bg-gray-200 rounded-full h-2.5 mb-8">
                        <div class="bg-purple-600 h-2.5 rounded-full" id="checkInProgressBar" style="width: 0%;"></div>
                    </div>

                    <!-- Step Content -->
                    <div id="checkInStepContent" class="flex-1 flex flex-col items-center justify-center text-center">
                        <!-- Content for each step will be injected here -->
                    </div>

                    <!-- Navigation Buttons -->
                    <div class="flex justify-between mt-8">
                        <button id="checkInBackBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full transition-colors hidden">
                            ← Back
                        </button>
                        <button id="checkInNextBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full transition-colors ml-auto">
                            Next →
                        </button>
                        <button id="completeCheckInBtn" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-full transition-colors hidden ml-auto">
                            Complete Check-in
                        </button>
                    </div>
                </div>
            </div>

            <!-- Companion View (AI Chat) -->
            <div id="companionView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-hidden">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Your Beam Companion</h1>
                    <p class="mt-2 text-gray-600">A safe space for reflection, support, and trauma-informed dialogue.</p>
                </div>

                <div id="chat-window" class="flex-1 bg-white rounded-2xl p-6 overflow-y-auto space-y-4 shadow-inner">
                    <!-- Chat messages will be appended here -->
                    <div class="flex items-start space-x-3">
                        <div class="w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center flex-shrink-0">
                           <span class="text-lg">💬</span>
                        </div>
                        <div class="chat-bubble chat-bubble-bot">
                            <p>Hello! I'm your Beam companion. I'm here to support you with gentle, trauma-informed conversations about your wellbeing, workplace experiences, and reflections. How are you feeling today?</p>
                        </div>
                    </div>
                </div>
                <form id="chat-form" class="mt-4">
                    <div class="flex flex-col sm:flex-row items-center bg-white rounded-full p-2 shadow-md">
                        <input id="chat-input" type="text" placeholder="Share your thoughts, feelings, or questions..." class="flex-1 w-full bg-transparent px-4 py-2 text-gray-700 focus:outline-none">
                        <button type="submit" class="bg-purple-600 text-white rounded-full p-3 hover:bg-purple-700 transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 mt-2 sm:mt-0">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" /></svg>
                        </button>
                    </div>
                </form>
            </div>

            <!-- Calm Space View -->
            <div id="calmSpaceView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-hidden">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Your Calm Space</h1>
                    <p class="mt-2 text-gray-600">Find peace through guided meditation and mindful reflection.</p>
                </div>

                <!-- Time-of-Day Reflection Block (Moved to Calm Space) -->
                <div class="reflection-block">
                    <h2 id="calmSpaceGreeting" class="text-xl font-bold mb-2"></h2>
                    <p class="text-gray-600 mb-4">How are you feeling?</p>
                    <div class="flex justify-center space-x-4">
                        <button class="emoji-button" data-feeling="calm" data-target="journalingInput">😌</button>
                        <button class="emoji-button" data-feeling="energetic" data-target="journalingInput">⚡</button>
                        <button class="emoji-button" data-feeling="tired" data-target="journalingInput">😴</button>
                        <button class="emoji-button" data-feeling="stressed" data-target="journalingInput">😟</button>
                        <button class="emoji-button" data-feeling="hopeful" data-target="journalingInput">✨</button>
                    </div>
                    <div id="calmSpacePromptLoading" class="hidden mt-4 text-purple-600">Generating prompt...</div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 flex-1 overflow-y-auto">
                    <!-- Meditation Video Placeholder 1 -->
                    <div class="metric-card flex flex-col items-center justify-center p-6">
                        <h2 class="text-xl font-bold mb-4">Guided Meditation</h2>
                        <div class="video-placeholder-container w-full h-48 md:h-64">
                             <img src="http://googleusercontent.com/file_content/1" alt="Meditation Scene 1" class="video-placeholder-img">
                        </div>
                        <p class="text-sm text-gray-500 mt-4">A gentle session to center your mind.</p>
                    </div>

                    <!-- Meditation Video Placeholder 2 -->
                    <div class="metric-card flex flex-col items-center justify-center p-6">
                        <h2 class="text-xl font-bold mb-4">Yoga for Mindfulness</h2>
                        <div class="video-placeholder-container w-full h-48 md:h-64">
                            <img src="http://googleusercontent.com/file_content/2" alt="Yoga Scene 1" class="video-placeholder-img">
                        </div>
                        <p class="text-sm text-gray-500 mt-4">Flow with intention and release tension.</p>
                    </div>

                    <!-- Journaling Reflection Area -->
                    <div class="lg:col-span-2 metric-card flex flex-col p-6">
                        <h2 class="text-xl font-bold mb-4">Journaling for Reflection</h2>
                        <p class="text-gray-600 mb-4">Use this space to jot down your thoughts, feelings, and insights from your meditation or daily experiences.</p>
                        <textarea id="journalingInput" class="w-full flex-1 bg-gray-50 rounded-lg p-3 border border-gray-200 focus:outline-none focus:ring-2 focus:ring-purple-500" rows="6" placeholder="Start writing your reflections here..."></textarea>
                        <button class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full mt-4 self-end">Save Reflection</button>
                    </div>
                </div>
            </div>

            <!-- Step Challenge View -->
            <div id="stepChallengeView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-hidden">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Step Challenge</h1>
                    <p class="mt-2 text-gray-600">Compete with colleagues and track your steps!</p>
                </div>

                <!-- User Name Input -->
                <div id="userNameInputSection" class="metric-card mb-6 p-6 text-center">
                    <h2 class="text-xl font-bold mb-4">Set Your Challenge Name</h2>
                    <p class="text-gray-600 mb-4">Enter a name that will appear on the leaderboard for your steps.</p>
                    <input type="text" id="userNameInput" placeholder="Your Name" class="w-full max-w-sm px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500">
                    <button id="saveUserNameBtn" class="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full transition-colors">Save Name</button>
                </div>

                <div id="stepChallengeContent" class="hidden flex-1 flex flex-col">
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 flex-1 overflow-hidden">
                        <!-- My Steps Card -->
                        <div class="metric-card flex flex-col p-6">
                            <h2 class="text-xl font-bold mb-4">My Steps This Week</h2>
                            <p class="text-5xl font-extrabold text-purple-700 mt-4" id="myTotalSteps">0</p>
                            <p class="text-lg text-gray-600 mt-2" id="myDailySteps">Today: 0 steps</p>
                            <div class="mt-6 flex flex-col sm:flex-row items-center space-y-3 sm:space-y-0 sm:space-x-3">
                                <input type="number" id="stepsInput" placeholder="Enter steps" class="w-full sm:w-auto flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500">
                                <button id="addStepsBtn" class="w-full sm:w-auto bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full transition-colors">Add Steps</button>
                            </div>
                            <p id="stepMessage" class="text-sm text-gray-500 mt-2"></p>
                        </div>

                        <!-- Leaderboard Card -->
                        <div class="metric-card flex flex-col p-6 overflow-y-auto">
                            <h2 class="text-xl font-bold mb-4">Leaderboard</h2>
                            <div id="leaderboardList" class="space-y-3">
                                <!-- Leaderboard items will be injected here -->
                                <p class="text-gray-500">Loading leaderboard...</p>
                            </div>
                            <div id="leaderboardLoading" class="hidden text-center mt-4 text-purple-600">Loading...</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings View -->
            <div id="settingsView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-y-auto">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Settings</h1>
                    <p class="mt-2 text-gray-600">Manage your app experience and preferences.</p>
                </div>

                <div class="grid grid-cols-1 gap-6 max-w-2xl mx-auto w-full">
                    <!-- Account Settings -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Account Settings</h2>
                        <div class="space-y-3">
                            <button id="openProfileSettingsBtn" class="w-full text-left flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Edit Profile</span>
                                <span class="text-gray-500">→</span>
                            </button>
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Change Password</span>
                                <span class="text-gray-500">→</span>
                            </div>
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Email Preferences</span>
                                <span class="text-gray-500">→</span>
                            </div>
                        </div>
                    </div>

                    <!-- Notifications -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Notifications</h2>
                        <div class="space-y-3">
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Daily check-in reminders</span>
                                <label class="toggle-switch">
                                    <input type="checkbox" id="toggleDailyReminders">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Personalized insight alerts</span>
                                <label class="toggle-switch">
                                    <input type="checkbox" id="toggleInsightAlerts">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Data & Privacy -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Data & Privacy</h2>
                        <div class="space-y-3">
                            <button id="openDataPrivacySettingsBtn" class="w-full text-left flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Privacy Settings</span>
                                <span class="text-gray-500">⚙️</span>
                            </button>
                        </div>
                    </div>

                    <!-- Appearance -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Appearance</h2>
                        <div class="space-y-3">
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Dark mode</span>
                                <label class="toggle-switch">
                                    <input type="checkbox" id="toggleDarkMode">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Reduce animations</span>
                                <label class="toggle-switch">
                                    <input type="checkbox" id="toggleReduceAnimations">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- About Beam -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">About Beam</h2>
                        <div class="space-y-3 text-gray-600">
                            <p class="py-1">App Version: 1.0.0</p>
                            <p class="py-1">Developed by: Lovable X</p>
                            <div class="py-1">
                                <a href="#" class="text-purple-600 hover:underline">Terms of Service</a>
                            </div>
                        </div>
                    </div>

                    <!-- Logout Button -->
                    <div class="text-center mt-6">
                        <button id="logoutBtn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out">
                            Logout
                        </button>
                    </div>
                </div>
            </div>

            <!-- Profile Settings View -->
            <div id="profileSettingsView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-y-auto">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Profile Settings</h1>
                    <p class="mt-2 text-gray-600">Manage your personal information and preferences.</p>
                </div>

                <div class="grid grid-cols-1 gap-6 max-w-2xl mx-auto w-full">
                    <!-- Profile Information -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Profile Information</h2>
                        <div class="space-y-4">
                            <div class="flex items-center space-x-4">
                                <div class="profile-avatar" id="profileAvatar">CD</div>
                                <div>
                                    <p class="font-semibold">Profile Picture</p>
                                    <p class="text-sm text-gray-500">Avatar is automatically generated from your name</p>
                                </div>
                            </div>
                            <div>
                                <label for="profileDisplayName" class="block text-sm font-medium text-gray-700 mb-1">Display Name</label>
                                <input type="text" id="profileDisplayName" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Your Display Name">
                            </div>
                            <div>
                                <label for="profileEmail" class="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
                                <input type="email" id="profileEmail" class="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-100 cursor-not-allowed" value="your.email@example.com" disabled>
                                <p class="text-xs text-gray-500 mt-1">Email cannot be changed. Contact support if you need to update it.</p>
                            </div>
                            <button id="saveProfileChangesBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full shadow-lg transition-all duration-300 ease-in-out">
                                Save Changes
                            </button>
                        </div>
                    </div>

                    <!-- Account Information -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Account Information</h2>
                        <div class="space-y-3 text-gray-600">
                            <div class="flex justify-between items-center py-1">
                                <span>Member Since</span>
                                <span id="memberSinceDate">July 31, 2025</span>
                            </div>
                            <div class="flex justify-between items-center py-1">
                                <span>Account Status</span>
                                <span class="flex items-center text-green-500">
                                    <span class="w-2.5 h-2.5 bg-green-500 rounded-full mr-2"></span> Active
                                </span>
                            </div>
                        </div>
                    </div>

                    <!-- Back Button -->
                    <div class="text-center mt-6">
                        <button id="profileBackBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full transition-colors">
                            ← Back to Settings
                        </button>
                    </div>
                </div>
            </div>

            <!-- Data Privacy Settings View -->
            <div id="dataPrivacySettingsView" class="hidden flex-1 flex flex-col p-4 md:p-6 overflow-y-auto">
                <div class="text-center mb-6">
                    <h1 class="text-3xl md:text-4xl font-bold text-gray-900">Privacy Settings</h1>
                    <p class="mt-2 text-gray-600">Control how your data is used and manage your personal data.</p>
                </div>

                <div class="grid grid-cols-1 gap-6 max-w-2xl mx-auto w-full">
                    <!-- Data Sharing Preferences -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Data Sharing Preferences</h2>
                        <div class="space-y-3">
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Share anonymized data for research</span>
                                <label class="toggle-switch">
                                    <input type="checkbox" id="toggleShareAnonymizedData">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <div class="flex justify-between items-center py-2 border-b border-gray-200 last:border-b-0">
                                <span>Allow personalized insights based on my data</span>
                                <label class="toggle-switch">
                                    <input type="checkbox" id="togglePersonalizedInsights">
                                    <span class="slider round"></span>
                                </label>
                            </div>
                            <p class="text-sm text-gray-500 mt-2">Your privacy is our priority. We only use your data to improve your experience and contribute to broader wellness research, always ensuring your anonymity.</p>
                        </div>
                    </div>

                    <!-- Companion AI Data Consent (Moved from old modal) -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Companion AI Data Consent</h2>
                        <p class="text-sm text-gray-600 mb-3">
                            This controls whether your chat data with the Beam Companion is processed by the Gemini AI API.
                        </p>
                        <div class="flex justify-between items-center">
                            <span>Status: <span id="companionConsentStatusDataPrivacy" class="font-bold">Not Consented</span></span>
                            <button id="toggleCompanionConsentBtnDataPrivacy" class="bg-blue-500 hover:bg-blue-600 text-white text-sm font-bold py-2 px-4 rounded-full">
                                Change Consent
                            </button>
                        </div>
                        <p class="text-xs text-gray-500 mt-2">
                            *Clearing consent will disable the Companion feature until you re-consent.
                        </p>
                    </div>

                    <!-- Health Connect Integration -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Health Connect Integration</h2>
                        <p class="text-gray-600 mb-3">Manage your health data connections.</p>
                        <div class="flex justify-between items-center py-1">
                            <span>Current Status</span>
                            <span class="flex items-center text-green-500">
                                <span class="w-2.5 h-2.5 bg-green-500 rounded-full mr-2"></span> Connected
                            </span>
                        </div>
                        <button class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-full mt-4 w-full">
                            Manage Health Connect Permissions
                        </button>
                        <p class="text-xs text-gray-500 mt-2">Control which health data categories Beam can access or disconnect entirely via your device's Health Connect settings.</p>
                    </div>

                    <!-- Your Data -->
                    <div class="metric-card p-6">
                        <h2 class="text-xl font-bold mb-4">Your Data</h2>
                        <p class="text-gray-600 mb-3">Manage and control your personal data.</p>
                        <button class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full w-full">
                            Download My Data
                        </button>
                        <button class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-full mt-3 w-full">
                            Request Data Deletion
                        </button>
                        <p class="text-xs text-gray-500 mt-2">You have the right to request a copy of your data or its deletion. We will process your request in accordance with our Privacy Policy.</p>
                    </div>

                    <!-- Back Button -->
                    <div class="text-center mt-6">
                        <button id="dataPrivacyBackBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full transition-colors">
                            ← Back to Settings
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Modal for Score Analysis -->
    <div id="scoreAnalysisModal" class="modal hidden">
        <div class="modal-content">
            <button class="modal-close-btn" id="closeAnalysisModal">&times;</button>
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Your Score Analysis</h2>
            <p id="analysisOutput" class="text-gray-700 leading-relaxed"></p>
            <div id="modalLoading" class="hidden mt-4 text-purple-600">Generating analysis...</div>
        </div>
    </div>

    <!-- Privacy Consent Modal for Companion (Initial Opt-in - remains) -->
    <div id="privacyConsentView" class="modal hidden">
        <div class="modal-content text-center">
            <h2 class="text-2xl font-bold text-gray-900 mb-4">Privacy for Your Beam Companion</h2>
            <p class="text-gray-700 mb-6">
                Your Beam Companion uses advanced Artificial Intelligence (AI) to understand your messages and provide helpful, empathetic responses.
                To do this, your chat messages are sent to the Gemini AI API, which is operated by Google.
                This means your data may be processed and stored on servers outside of Australia.
            </p>
            <p class="text-gray-700 mb-6 font-semibold">
                By clicking "Accept & Continue", you consent to your chat data being processed by the Gemini AI API as described.
                Your data will not be used to train the Gemini model unless you explicitly opt-in through Google's own settings.
            </p>
            <div class="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:space-x-4">
                <button id="acceptConsentBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-6 rounded-full shadow-lg transition-all duration-300 ease-in-out">
                    Accept & Continue
                </button>
                <button id="declineConsentBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-3 px-6 rounded-full shadow-lg transition-colors duration-300 ease-in-out">
                    Decline
                </button>
            </div>
        </div>
    </div>


    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut, createUserWithEmailAndPassword, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, query, where, getDocs } from "https://www.gstatic.com/firebasejs/10.12.4/firebase-firestore.js";

        document.addEventListener('DOMContentLoaded', function () {
            const landingPageView = document.getElementById('landingPageView'); // New view
            const authView = document.getElementById('authView'); // New view
            const dashboardView = document.getElementById('dashboardView');
            const checkInView = document.getElementById('checkInView');
            const companionView = document.getElementById('companionView');
            const calmSpaceView = document.getElementById('calmSpaceView');
            const stepChallengeView = document.getElementById('stepChallengeView');
            const settingsView = document.getElementById('settingsView');
            const profileSettingsView = document.getElementById('profileSettingsView');
            const dataPrivacySettingsView = document.getElementById('dataPrivacySettingsView'); // New view
            
            const navDashboard = document.getElementById('nav-dashboard');
            const navCheckIn = document.getElementById('nav-check-in');
            const navCompanion = document.getElementById('nav-companion');
            const navCalmSpace = document.getElementById('nav-calm-space');
            const navStepChallenge = document.getElementById('nav-step-challenge');
            const navSettings = document.getElementById('nav-settings');
            const mobileNav = document.getElementById('mobile-nav');

            const chatWindow = document.getElementById('chat-window');
            const chatForm = document.getElementById('chat-form');
            const chatInput = document.getElementById('chat-input');
            let chatHistory = [];

            const analyzeScoresBtn = document.getElementById('analyzeScoresBtn');
            const scoreAnalysisModal = document.getElementById('scoreAnalysisModal');
            const closeAnalysisModal = document.getElementById('closeAnalysisModal');
            const analysisOutput = document.getElementById('analysisOutput');
            const analysisLoading = document.getElementById('analysisLoading');

            // Calm Space Elements (for emoji prompts)
            const calmSpaceGreeting = document.getElementById('calmSpaceGreeting');
            const calmSpaceEmojiButtons = document.querySelectorAll('#calmSpaceView .emoji-button');
            const calmSpacePromptLoading = document.getElementById('calmSpacePromptLoading');
            const journalingInput = document.getElementById('journalingInput');

            // Privacy Consent Elements (for Companion initial opt-in)
            const privacyConsentView = document.getElementById('privacyConsentView');
            const acceptConsentBtn = document.getElementById('acceptConsentBtn');
            const declineConsentBtn = document.getElementById('declineConsentBtn');

            // Step Challenge Elements
            const userNameInputSection = document.getElementById('userNameInputSection');
            const userNameInput = document.getElementById('userNameInput');
            const saveUserNameBtn = document.getElementById('saveUserNameBtn');
            const stepChallengeContent = document.getElementById('stepChallengeContent');
            const myTotalSteps = document.getElementById('myTotalSteps');
            const myDailySteps = document.getElementById('myDailySteps');
            const stepsInput = document.getElementById('stepsInput');
            const addStepsBtn = document.getElementById('addStepsBtn');
            const stepMessage = document.getElementById('stepMessage');
            const leaderboardList = document.getElementById('leaderboardList');
            const leaderboardLoading = document.getElementById('leaderboardLoading');

            // Dashboard Score Elements
            const wellbeingScoreEl = document.getElementById('wellbeingScore');
            const safetyScoreEl = document.getElementById('safetyScore');
            const inclusionScoreEl = document.getElementById('inclusionScore');
            const wellbeingProgressBar = document.getElementById('wellbeingProgressBar');
            const safetyProgressBar = document.getElementById('safetyProgressBar');
            const inclusionProgressBar = document.getElementById('inclusionProgressBar');
            const wellbeingChangeEl = document.getElementById('wellbeingChange');
            const safetyChangeEl = document.getElementById('safetyChange');
            const inclusionChangeEl = document.getElementById('inclusionChange');
            const dashboardLastUpdated = document.getElementById('dashboardLastUpdated');

            // Settings Elements
            const toggleDailyReminders = document.getElementById('toggleDailyReminders');
            const toggleInsightAlerts = document.getElementById('toggleInsightAlerts');
            const toggleDarkMode = document.getElementById('toggleDarkMode');
            const toggleReduceAnimations = document.getElementById('toggleReduceAnimations');
            const logoutBtn = document.getElementById('logoutBtn');
            const openDataPrivacySettingsBtn = document.getElementById('openDataPrivacySettingsBtn'); // Button in main settings to open new privacy view

            // Data Privacy Settings View Elements
            const toggleShareAnonymizedData = document.getElementById('toggleShareAnonymizedData');
            const togglePersonalizedInsights = document.getElementById('togglePersonalizedInsights');
            const companionConsentStatusDataPrivacy = document.getElementById('companionConsentStatusDataPrivacy');
            const toggleCompanionConsentBtnDataPrivacy = document.getElementById('toggleCompanionConsentBtnDataPrivacy');
            const dataPrivacyBackBtn = document.getElementById('dataPrivacyBackBtn');


            // Profile Settings Elements
            const openProfileSettingsBtn = document.getElementById('openProfileSettingsBtn');
            const profileDisplayNameInput = document.getElementById('profileDisplayName');
            const profileAvatar = document.getElementById('profileAvatar');
            const profileEmailInput = document.getElementById('profileEmail');
            const saveProfileChangesBtn = document.getElementById('saveProfileChangesBtn');
            const memberSinceDate = document.getElementById('memberSinceDate');
            const profileBackBtn = document.getElementById('profileBackBtn');

            // Landing Page Elements
            const startCheckInLandingBtn = document.getElementById('startCheckInLandingBtn');
            const viewDashboardLandingBtn = document.getElementById('viewDashboardLandingBtn');

            // Auth Page Elements
            const authTitle = document.getElementById('authTitle');
            const authError = document.getElementById('authError');
            const authForm = document.getElementById('authForm');
            const authEmail = document.getElementById('authEmail');
            const authPassword = document.getElementById('authPassword');
            const authDisplayNameGroup = document.getElementById('authDisplayNameGroup');
            const authDisplayName = document.getElementById('authDisplayName');
            const authSubmitBtn = document.getElementById('authSubmitBtn');
            const authToggleText = document.getElementById('authToggleText');
            const authToggleButton = document.getElementById('authToggleButton');
            const continueAsGuestBtn = document.getElementById('continueAsGuestBtn');

            let isLoginMode = true; // True for login, false for signup

            // --- Auth Logic ---
            authToggleButton.addEventListener('click', () => {
                isLoginMode = !isLoginMode;
                authTitle.textContent = isLoginMode ? 'Login to Beam' : 'Sign Up for Beam';
                authSubmitBtn.textContent = isLoginMode ? 'Login' : 'Sign Up';
                authToggleText.textContent = isLoginMode ? "Don't have an account?" : "Already have an account?";
                authToggleButton.textContent = isLoginMode ? 'Sign Up' : 'Login';
                authDisplayNameGroup.classList.toggle('hidden', isLoginMode);
                authError.classList.add('hidden'); // Clear error on toggle
            });

            authForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                authError.classList.add('hidden'); // Hide previous errors
                const email = authEmail.value.trim();
                const password = authPassword.value.trim();
                const displayName = authDisplayName.value.trim();

                if (isLoginMode) {
                    // Login
                    try {
                        await signInWithEmailAndPassword(window.auth, email, password);
                        // User signed in, onAuthStateChanged will handle redirection
                    } catch (error) {
                        console.error("Login error:", error);
                        authError.textContent = error.message.includes('auth/invalid-credential') ? 'Invalid email or password.' : error.message;
                        authError.classList.remove('hidden');
                    }
                } else {
                    // Sign Up
                    if (!displayName) {
                        authError.textContent = 'Please enter a display name.';
                        authError.classList.remove('hidden');
                        return;
                    }
                    try {
                        const userCredential = await createUserWithEmailAndPassword(window.auth, email, password);
                        // Store display name in localStorage for new user
                        localStorage.setItem(`beam_username_${userCredential.user.uid}`, displayName);
                        // User signed up, onAuthStateChanged will handle redirection
                    } catch (error) {
                        console.error("Sign up error:", error);
                        authError.textContent = error.message.includes('auth/email-already-in-use') ? 'Email already in use.' : error.message;
                        authError.classList.remove('hidden');
                    }
                }
            });

            continueAsGuestBtn.addEventListener('click', async () => {
                try {
                    // Ensure anonymous sign-in is always available for guests
                    if (!window.auth.currentUser || !window.auth.currentUser.isAnonymous) {
                         await signInAnonymously(window.auth);
                    }
                    window.location.hash = '#dashboard'; // Redirect to dashboard
                } catch (error) {
                    console.error("Error signing in anonymously as guest:", error);
                    alert("Could not continue as guest. Please try again.");
                }
            });

            // --- Check-in Logic ---
            const checkInStepContent = document.getElementById('checkInStepContent');
            const checkInBackBtn = document.getElementById('checkInBackBtn');
            const checkInNextBtn = document.getElementById('checkInNextBtn');
            const completeCheckInBtn = document.getElementById('completeCheckInBtn');
            const checkInProgressBar = document.getElementById('checkInProgressBar');

            let currentCheckInStep = 0;
            const checkInScores = {
                wellbeing: 5, // Default starting value for slider
                safety: 5,
                inclusion: 5,
                reflection: ""
            };

            const checkInQuestions = [
                {
                    title: "How are you feeling today?",
                    subtitle: "Take a moment to check in with yourself",
                    key: "wellbeing",
                    icon: "😊",
                    min: 1, max: 10, initial: 7
                },
                {
                    title: "How psychologically safe do you feel?",
                    subtitle: "In your current environment and relationships",
                    key: "safety",
                    icon: "🛡️",
                    min: 1, max: 10, initial: 8
                },
                {
                    title: "How included do you feel?",
                    subtitle: "In your community and decision-making processes",
                    key: "inclusion",
                    icon: "🤝",
                    min: 1, max: 10, initial: 6
                },
                {
                    title: "What's on your mind?",
                    subtitle: "Share any thoughts, concerns, or celebrations (optional)",
                    key: "reflection",
                    icon: "💭"
                }
            ];

            function renderCheckInStep() {
                const stepData = checkInQuestions[currentCheckInStep];
                const totalSteps = checkInQuestions.length;
                const progressPercentage = ((currentCheckInStep + 1) / totalSteps) * 100;
                checkInProgressBar.style.width = `${progressPercentage}%`;

                let contentHtml = `
                    <div class="mb-6 text-center">
                        <span class="text-4xl mb-4 inline-block">${stepData.icon}</span>
                        <h2 class="text-2xl md:text-3xl font-bold text-gray-900 mb-2">${stepData.title}</h2>
                        <p class="text-gray-600">${stepData.subtitle}</p>
                    </div>
                    <p class="text-sm text-gray-500 mb-4">Step ${currentCheckInStep + 1} of ${totalSteps}</p>
                `;

                if (stepData.key === "reflection") {
                    contentHtml += `
                        <textarea id="checkInReflectionInput" class="w-full h-48 bg-gray-50 rounded-lg p-3 border border-gray-200 focus:outline-none focus:ring-2 focus:ring-purple-500" placeholder="Share whatever feels right for you today. This space is yours to express yourself freely and safely.">${checkInScores.reflection}</textarea>
                        <p class="text-sm text-gray-500 mt-2">Your thoughts are private and secure. You can skip this step if you prefer.</p>
                    `;
                    checkInNextBtn.classList.add('hidden');
                    completeCheckInBtn.classList.remove('hidden');
                } else {
                    const currentValue = checkInScores[stepData.key] || stepData.initial;
                    contentHtml += `
                        <div class="slider-value" id="currentSliderValue">${currentValue}</div>
                        <input type="range" id="checkInSlider" min="${stepData.min}" max="${stepData.max}" value="${currentValue}" class="w-full">
                        <p class="text-sm text-gray-500 mt-2">1 = Not at all - 10 = Completely</p>
                    `;
                    checkInNextBtn.classList.remove('hidden');
                    completeCheckInBtn.classList.add('hidden');
                }

                checkInStepContent.innerHTML = contentHtml;

                // Update button visibility
                if (currentCheckInStep === 0) {
                    checkInBackBtn.classList.add('hidden');
                } else {
                    checkInBackBtn.classList.remove('hidden');
                }

                // Add event listener for slider
                if (stepData.key !== "reflection") {
                    const slider = document.getElementById('checkInSlider');
                    const sliderValueDisplay = document.getElementById('currentSliderValue');
                    slider.oninput = function() {
                        sliderValueDisplay.textContent = this.value;
                        checkInScores[stepData.key] = parseInt(this.value);
                    };
                } else {
                    const reflectionInput = document.getElementById('checkInReflectionInput');
                    reflectionInput.oninput = function() {
                        checkInScores.reflection = this.value;
                    };
                }
            }

            checkInNextBtn.addEventListener('click', () => {
                if (currentCheckInStep < checkInQuestions.length - 1) {
                    currentCheckInStep++;
                    renderCheckInStep();
                }
            });

            checkInBackBtn.addEventListener('click', () => {
                if (currentCheckInStep > 0) {
                    currentCheckInStep--;
                    renderCheckInStep();
                }
            });

            completeCheckInBtn.addEventListener('click', async () => {
                if (!window.db || !window.currentUserId) {
                    alert("App not ready. Please wait or refresh.");
                    return;
                }

                const todayDate = formatDate(new Date());
                const checkInDocRef = doc(window.db, `artifacts/${__app_id}/users/${window.currentUserId}/checkIns`, todayDate);

                try {
                    await setDoc(checkInDocRef, {
                        wellbeing: checkInScores.wellbeing,
                        safety: checkInScores.safety,
                        inclusion: checkInScores.inclusion,
                        reflection: checkInScores.reflection,
                        timestamp: new Date()
                    }, { merge: true });

                    alert("Check-in complete! Your scores have been saved.");
                    // Reset check-in for next time
                    currentCheckInStep = 0;
                    checkInScores.wellbeing = 5;
                    checkInScores.safety = 5;
                    checkInScores.inclusion = 5;
                    checkInScores.reflection = "";
                    window.location.hash = '#dashboard'; // Go back to dashboard after completion
                } catch (e) {
                    console.error("Error saving check-in:", e);
                    alert("Error saving check-in. Please try again.");
                }
            });

            // Listen for dashboard score updates from Firestore
            let unsubscribeDashboard = null;
            function listenForDashboardUpdates() {
                if (!window.db || !window.currentUserId) {
                    console.warn("Firestore not ready for dashboard updates.");
                    return;
                }

                if (unsubscribeDashboard) {
                    unsubscribeDashboard();
                }

                const checkInsCollectionRef = collection(window.db, `artifacts/${__app_id}/users/${window.currentUserId}/checkIns`);
                const q = query(checkInsCollectionRef); // No orderBy to avoid index issues

                unsubscribeDashboard = onSnapshot(q, (snapshot) => {
                    let latestCheckIn = null;
                    let latestDate = null;
                    const weeklyData = {}; // Stores data for the chart

                    const startOfWeek = getStartOfWeek(); // Function from step challenge

                    snapshot.forEach((doc) => {
                        const data = doc.data();
                        const docDate = new Date(doc.id); // Assuming doc.id is YYYY-MM-DD

                        // For dashboard current scores: find the very latest check-in
                        if (!latestCheckIn || docDate > latestDate) {
                            latestCheckIn = data;
                            latestDate = docDate;
                        }

                        // For weekly trends chart: collect data for the current week
                        if (docDate >= startOfWeek) {
                            const dayOfWeek = docDate.getDay(); // 0 (Sunday) to 6 (Saturday)
                            const dayIndex = (dayOfWeek === 0) ? 6 : dayOfWeek - 1; // Map Sunday to 6, Monday to 0
                            const dayLabel = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'][dayIndex];
                            
                            // Average scores for the day if multiple check-ins
                            if (!weeklyData[dayLabel]) {
                                weeklyData[dayLabel] = { wellbeing: [], safety: [], inclusion: [] };
                            }
                            weeklyData[dayLabel].wellbeing.push(data.wellbeing);
                            weeklyData[dayLabel].safety.push(data.safety);
                            weeklyData[dayLabel].inclusion.push(data.inclusion);
                        }
                    });

                    // Update Dashboard Scores
                    if (latestCheckIn) {
                        wellbeingScoreEl.textContent = latestCheckIn.wellbeing.toFixed(1);
                        safetyScoreEl.textContent = latestCheckIn.safety.toFixed(1);
                        inclusionScoreEl.textContent = latestCheckIn.inclusion.toFixed(1);

                        wellbeingProgressBar.style.width = `${latestCheckIn.wellbeing * 10}%`;
                        safetyProgressBar.style.width = `${latestCheckIn.safety * 10}%`;
                        inclusionProgressBar.style.width = `${latestCheckIn.inclusion * 10}%`;

                        // Update last updated date
                        dashboardLastUpdated.textContent = `Last updated: ${latestDate.toLocaleDateString('en-AU', { day: '2-digit', month: '2-digit', year: 'numeric' })}`;

                        // For weekly change, we'd need to compare to a previous week's average or specific day.
                        // For simplicity, we'll keep the static "+0.0 this week" for now or calculate a simple change if enough data exists.
                        // Example: (current - previous) / previous * 100
                        // For now, these will remain static or show 0.0
                        wellbeingChangeEl.textContent = "+0.0 this week";
                        safetyChangeEl.textContent = "+0.0 this week";
                        inclusionChangeEl.textContent = "+0.0 this week";

                    } else {
                        // No check-ins yet
                        wellbeingScoreEl.textContent = "0.0";
                        safetyScoreEl.textContent = "0.0";
                        inclusionScoreEl.textContent = "0.0";
                        wellbeingProgressBar.style.width = `0%`;
                        safetyProgressBar.style.width = `0%`;
                        inclusionProgressBar.style.width = `0%`;
                        dashboardLastUpdated.textContent = `Last updated: N/A`;
                        wellbeingChangeEl.textContent = "+0.0 this week";
                        safetyChangeEl.textContent = "+0.0 this week";
                        inclusionChangeEl.textContent = "+0.0 this week";
                    }

                    // Update Weekly Trends Chart
                    const chartLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
                    const wellbeingData = chartLabels.map(day => {
                        const values = weeklyData[day]?.wellbeing || [];
                        return values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;
                    });
                    const safetyData = chartLabels.map(day => {
                        const values = weeklyData[day]?.safety || [];
                        return values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;
                    });
                    const inclusionData = chartLabels.map(day => {
                        const values = weeklyData[day]?.inclusion || [];
                        return values.length > 0 ? values.reduce((sum, val) => sum + val, 0) / values.length : 0;
                    });

                    // Destroy existing chart if it exists to prevent multiple instances
                    if (window.myWeeklyTrendsChart) {
                        window.myWeeklyTrendsChart.destroy();
                    }

                    const ctx = document.getElementById('weeklyTrendsChart').getContext('2d');
                    window.myWeeklyTrendsChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: chartLabels,
                            datasets: [{
                                label: 'Wellbeing',
                                data: wellbeingData,
                                borderColor: '#ef4444',
                                backgroundColor: '#ef4444',
                                tension: 0.4,
                                borderWidth: 3,
                                pointRadius: 5,
                                pointBackgroundColor: '#ef4444',
                            }, {
                                label: 'Safety',
                                data: safetyData,
                                borderColor: '#3b82f6',
                                backgroundColor: '#3b82f6',
                                tension: 0.4,
                                borderWidth: 3,
                                pointRadius: 5,
                                pointBackgroundColor: '#3b82f6',
                            }, {
                                label: 'Inclusion',
                                data: inclusionData,
                                borderColor: '#22c55e',
                                backgroundColor: '#22c55e',
                                tension: 0.4,
                                borderWidth: 3,
                                pointRadius: 5,
                                pointBackgroundColor: '#22c55e',
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    max: 10,
                                    grid: {
                                        color: '#e5e7eb'
                                    }
                                },
                                x: {
                                    grid: {
                                        display: false
                                    }
                                }
                            },
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        usePointStyle: true,
                                        boxWidth: 8,
                                    }
                                },
                                tooltip: {
                                    mode: 'index',
                                    intersect: false,
                                    backgroundColor: '#1f2937',
                                    titleFont: { weight: 'bold' },
                                    bodySpacing: 5,
                                    padding: 12,
                                    cornerRadius: 8,
                                }
                            }
                        }
                    });

                }, (error) => {
                    console.error("Error listening to dashboard updates:", error);
                    // Handle error display on dashboard
                });
            }
            
            function addMessageToChat(sender, message) {
                const messageElement = document.createElement('div');
                if (sender === 'user') {
                    messageElement.className = 'flex justify-end';
                    messageElement.innerHTML = `
                        <div class="chat-bubble chat-bubble-user">
                            <p>${message}</p>
                        </div>
                    `;
                } else {
                    messageElement.className = 'flex items-start space-x-3';
                    messageElement.innerHTML = `
                        <div class="w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center flex-shrink-0">
                           <span class="text-lg">💬</span>
                        </div>
                        <div class="chat-bubble chat-bubble-bot">
                            <p>${message}</p>
                        </div>
                    `;
                }
                chatWindow.appendChild(messageElement);
                chatWindow.scrollTop = chatWindow.scrollHeight;
            }

            async function getCompanionResponse(prompt) {
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'flex items-start space-x-3';
                typingIndicator.innerHTML = `
                    <div class="w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center flex-shrink-0">
                       <span class="text-lg">💬</span>
                    </div>
                    <div class="chat-bubble chat-bubble-bot">
                        <p class="italic text-gray-500">Typing...</p>
                    </div>
                `;
                chatWindow.appendChild(typingIndicator);
                chatWindow.scrollTop = chatWindow.scrollHeight;

                chatHistory.push({ role: "user", parts: [{ text: prompt }] });
                const payload = { contents: chatHistory };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                let retries = 0;
                const maxRetries = 3;
                let success = false;

                while (retries < maxRetries && !success) {
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });

                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        
                        const result = await response.json();
                        
                        if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts[0]) {
                            const botResponse = result.candidates[0].content.parts[0].text;
                            chatHistory.push({ role: "model", parts: [{ text: botResponse }] });
                            typingIndicator.remove();
                            addMessageToChat('bot', botResponse);
                            success = true;
                        } else {
                            throw new Error("Invalid response structure from API");
                        }
                    } catch (error) {
                        console.error('Error fetching companion response:', error);
                        retries++;
                        if (retries >= maxRetries) {
                            typingIndicator.remove();
                            addMessageToChat('bot', 'Sorry, I seem to be having trouble connecting. Please try again in a moment.');
                        } else {
                            await new Promise(res => setTimeout(res, 1000 * Math.pow(2, retries)));
                        }
                    }
                }
            }

            chatForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const userInput = chatInput.value.trim();
                if (userInput) {
                    addMessageToChat('user', userInput);
                    getCompanionResponse(userInput);
                    chatInput.value = '';
                }
            });

            // Feature: Analyze Scores
            analyzeScoresBtn.addEventListener('click', async () => {
                analysisOutput.textContent = '';
                analysisLoading.classList.remove('hidden');
                scoreAnalysisModal.classList.remove('hidden');

                // Get current scores from the dashboard display
                const wellbeingScore = parseFloat(wellbeingScoreEl.textContent);
                const safetyScore = parseFloat(safetyScoreEl.textContent);
                const inclusionScore = parseFloat(inclusionScoreEl.textContent);

                const prompt = `Analyze the following wellbeing scores: Wellbeing Score: ${wellbeingScore}/10, Psychological Safety: ${safetyScore}/10, Inclusion Index: ${inclusionScore}/10. Provide a concise, empathetic, and encouraging interpretation of these scores, highlighting strengths and suggesting a general area for continued growth. Keep it under 100 words.`;

                const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                let retries = 0;
                const maxRetries = 3;
                let success = false;

                while (retries < maxRetries && !success) {
                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });

                        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                        
                        const result = await response.json();
                        
                        if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts[0]) {
                            analysisOutput.textContent = result.candidates[0].content.parts[0].text;
                            success = true;
                        } else {
                            throw new Error("Invalid response structure from API");
                        }
                    } catch (error) {
                        console.error('Error fetching score analysis:', error);
                        retries++;
                        if (retries >= maxRetries) {
                            analysisOutput.textContent = 'Sorry, I could not generate an analysis at this time. Please try again later.';
                        } else {
                            await new Promise(res => setTimeout(res, 1000 * Math.pow(2, retries)));
                        }
                    } finally {
                        analysisLoading.classList.add('hidden');
                    }
                }
            });

            closeAnalysisModal.addEventListener('click', () => {
                scoreAnalysisModal.classList.add('hidden');
            });

            // Calm Space: Time-of-Day Greeting Logic
            function updateCalmSpaceGreeting() {
                const now = new Date();
                const hour = now.getHours();
                let greeting = "Hello";
                if (hour >= 5 && hour < 12) {
                    greeting = "Good Morning";
                } else if (hour >= 12 && hour < 18) {
                    greeting = "Good Afternoon";
                } else {
                    greeting = "Good Evening";
                }
                calmSpaceGreeting.textContent = `${greeting}, Let's begin with intention.`;
            }

            // Calm Space: Feature: Generate Reflection Prompt based on Emoji click
            calmSpaceEmojiButtons.forEach(button => {
                button.addEventListener('click', async () => {
                    const feeling = button.dataset.feeling;
                    calmSpacePromptLoading.classList.remove('hidden');

                    const prompt = `Generate a concise, empathetic, and open-ended reflection prompt for someone feeling "${feeling}". The prompt should encourage self-awareness or gentle exploration of thoughts. Keep it under 25 words. Example for 'calm': "What moments of peace did you find today?"`;

                    const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
                    const apiKey = "";
                    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                    let retries = 0;
                    const maxRetries = 3;
                    let success = false;

                    while (retries < maxRetries && !success) {
                        try {
                            const response = await fetch(apiUrl, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            });

                            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                            
                            const result = await response.json();
                            
                            if (result.candidates && result.candidates[0].content && result.candidates[0].content.parts[0]) {
                                journalingInput.value = result.candidates[0].content.parts[0].text; // Populate the journaling textarea
                                success = true;
                            } else {
                                throw new Error("Invalid response structure from API");
                            }
                        } catch (error) {
                            console.error('Error fetching reflection prompt:', error);
                            retries++;
                            if (retries >= maxRetries) {
                                journalingInput.value = 'Could not generate prompt. Try typing your thoughts directly.';
                            } else {
                                await new Promise(res => setTimeout(res, 1000 * Math.pow(2, retries)));
                            }
                        } finally {
                            calmSpacePromptLoading.classList.add('hidden');
                        }
                    }
                });
            });


            // Privacy Consent Button Handlers (for initial Companion modal)
            acceptConsentBtn.addEventListener('click', () => {
                localStorage.setItem('companionConsent', 'true');
                navCompanion.classList.remove('disabled');
                window.location.hash = '#companion'; // Redirect to companion after consent
            });

            declineConsentBtn.addEventListener('click', () => {
                localStorage.setItem('companionConsent', 'false');
                navCompanion.classList.add('disabled');
                privacyConsentView.classList.add('hidden');
                window.location.hash = '#dashboard'; // Redirect to dashboard
                alert("You have declined consent for the Companion feature. It will remain disabled.");
            });


            // --- Settings Logic ---
            // Load initial settings from localStorage
            function loadSettings() {
                toggleDailyReminders.checked = localStorage.getItem('dailyReminders') === 'true';
                toggleInsightAlerts.checked = localStorage.getItem('insightAlerts') === 'true';
                toggleDarkMode.checked = localStorage.getItem('darkMode') === 'true';
                toggleReduceAnimations.checked = localStorage.getItem('reduceAnimations') === 'true';
                toggleShareAnonymizedData.checked = localStorage.getItem('shareAnonymizedData') === 'true'; // New
                togglePersonalizedInsights.checked = localStorage.getItem('personalizedInsights') === 'true'; // New

                // Apply dark mode immediately
                if (toggleDarkMode.checked) {
                    document.body.classList.add('dark-mode');
                } else {
                    document.body.classList.remove('dark-mode');
                }
                 // Apply reduce animations (placeholder for actual animation control)
                if (toggleReduceAnimations.checked) {
                    document.body.classList.add('reduce-animations'); // Add a class to disable/reduce animations via CSS
                } else {
                    document.body.classList.remove('reduce-animations');
                }
            }

            // Save settings to localStorage
            function saveSetting(key, value) {
                localStorage.setItem(key, value);
            }

            // Event listeners for settings toggles
            toggleDailyReminders.addEventListener('change', (e) => saveSetting('dailyReminders', e.target.checked));
            toggleInsightAlerts.addEventListener('change', (e) => saveSetting('insightAlerts', e.target.checked));
            toggleDarkMode.addEventListener('change', (e) => {
                saveSetting('darkMode', e.target.checked);
                if (e.target.checked) {
                    document.body.classList.add('dark-mode');
                } else {
                    document.body.classList.remove('dark-mode');
                }
            });
            toggleReduceAnimations.addEventListener('change', (e) => {
                saveSetting('reduceAnimations', e.target.checked);
                if (e.target.checked) {
                    document.body.classList.add('reduce-animations');
                } else {
                    document.body.classList.remove('reduce-animations');
                }
            });
            toggleShareAnonymizedData.addEventListener('change', (e) => saveSetting('shareAnonymizedData', e.target.checked)); // New
            togglePersonalizedInsights.addEventListener('change', (e) => saveSetting('personalizedInsights', e.target.checked)); // New


            // Logout functionality
            logoutBtn.addEventListener('click', async () => {
                if (window.auth) {
                    try {
                        await signOut(window.auth);
                        // Clear all local storage related to this user
                        localStorage.clear();
                        window.currentUserId = null;
                        window.currentUserName = null;
                        window.isAuthReady = false;
                        window.isAuthenticated = false;
                        alert("You have been logged out.");
                        window.location.hash = '#landing-page'; // Go back to landing page
                    } catch (error) {
                        console.error("Error logging out:", error);
                        alert("Error logging out. Please try again.");
                    }
                }
            });

            // Data Privacy Settings View handlers
            openDataPrivacySettingsBtn.addEventListener('click', () => {
                window.location.hash = '#data-privacy-settings';
                updateCompanionConsentStatusDataPrivacy(); // Update status when view opens
            });

            dataPrivacyBackBtn.addEventListener('click', () => {
                window.location.hash = '#settings';
            });

            function updateCompanionConsentStatusDataPrivacy() {
                const consent = localStorage.getItem('companionConsent');
                if (consent === 'true') {
                    companionConsentStatusDataPrivacy.textContent = 'Consented';
                    companionConsentStatusDataPrivacy.classList.remove('text-red-500');
                    companionConsentStatusDataPrivacy.classList.add('text-green-500');
                    toggleCompanionConsentBtnDataPrivacy.textContent = 'Revoke Consent';
                    toggleCompanionConsentBtnDataPrivacy.classList.remove('bg-blue-500');
                    toggleCompanionConsentBtnDataPrivacy.classList.add('bg-red-500');
                } else {
                    companionConsentStatusDataPrivacy.textContent = 'Not Consented';
                    companionConsentStatusDataPrivacy.classList.remove('text-green-500');
                    companionConsentStatusDataPrivacy.classList.add('text-red-500');
                    toggleCompanionConsentBtnDataPrivacy.textContent = 'Grant Consent';
                    toggleCompanionConsentBtnDataPrivacy.classList.remove('bg-red-500');
                    toggleCompanionConsentBtnDataPrivacy.classList.add('bg-blue-500');
                }
            }

            toggleCompanionConsentBtnDataPrivacy.addEventListener('click', () => {
                const currentConsent = localStorage.getItem('companionConsent');
                if (currentConsent === 'true') {
                    localStorage.setItem('companionConsent', 'false');
                    alert("Companion AI data consent revoked. The Companion feature will now be disabled.");
                } else {
                    localStorage.setItem('companionConsent', 'true');
                    alert("Companion AI data consent granted. You can now use the Companion feature.");
                }
                updateCompanionConsentStatusDataPrivacy();
                // Re-evaluate nav link status for Companion
                if (localStorage.getItem('companionConsent') === 'false') {
                    navCompanion.classList.add('disabled');
                } else {
                    navCompanion.classList.remove('disabled');
                }
            });


            // --- Profile Settings Logic ---
            openProfileSettingsBtn.addEventListener('click', () => {
                window.location.hash = '#profile-settings';
                // Populate profile fields
                profileDisplayNameInput.value = window.currentUserName || '';
                profileEmailInput.value = window.auth.currentUser?.email || "guest@example.com"; // Use actual email if logged in
                memberSinceDate.textContent = "July 31, 2025"; // Static date for now
                updateProfileAvatar(window.currentUserName || 'CD');
            });

            profileBackBtn.addEventListener('click', () => {
                window.location.hash = '#settings';
            });

            saveProfileChangesBtn.addEventListener('click', () => {
                const newDisplayName = profileDisplayNameInput.value.trim();
                if (newDisplayName) {
                    window.currentUserName = newDisplayName;
                    localStorage.setItem(`beam_username_${window.currentUserId}`, newDisplayName);
                    alert("Profile updated successfully!");
                    updateProfileAvatar(newDisplayName);
                    // Optionally, update Firestore user document if you had one for profile info
                } else {
                    alert("Display Name cannot be empty.");
                }
            });

            function updateProfileAvatar(name) {
                const initials = name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
                profileAvatar.textContent = initials;
            }


            // --- Step Challenge Logic ---
            // Helper to get the start of the current week (Monday)
            function getStartOfWeek() {
                const today = new Date();
                const dayOfWeek = today.getDay(); // 0 for Sunday, 1 for Monday, etc.
                const diff = today.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust for Monday start
                const startOfWeek = new Date(today.setDate(diff));
                startOfWeek.setHours(0, 0, 0, 0);
                return startOfWeek;
            }

            // Helper to format date as YYYY-MM-DD
            function formatDate(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            // Save User Name (from step challenge initial setup)
            saveUserNameBtn.addEventListener('click', () => {
                const userName = userNameInput.value.trim();
                if (userName) {
                    window.currentUserName = userName;
                    localStorage.setItem(`beam_username_${window.currentUserId}`, userName);
                    userNameInputSection.classList.add('hidden');
                    stepChallengeContent.classList.remove('hidden');
                    stepMessage.textContent = `Welcome, ${userName}!`;
                    listenForStepUpdates(); // Start listening after name is saved
                } else {
                    stepMessage.textContent = "Please enter a name.";
                }
            });

            // Add Steps
            addStepsBtn.addEventListener('click', async () => {
                if (!window.db || !window.currentUserId || !window.currentUserName) {
                    stepMessage.textContent = "App not ready. Please wait or refresh.";
                    return;
                }

                const stepsToAdd = parseInt(stepsInput.value, 10);
                if (isNaN(stepsToAdd) || stepsToAdd <= 0) {
                    stepMessage.textContent = "Please enter a valid number of steps.";
                    return;
                }

                stepMessage.textContent = "Adding steps...";
                const todayDate = formatDate(new Date());
                const stepsDocRef = doc(window.db, `artifacts/${__app_id}/public/data/stepChallenges`, window.currentUserId);

                try {
                    const docSnap = await getDoc(stepsDocRef);
                    let userStepsData = docSnap.exists() ? docSnap.data() : { dailySteps: {}, totalWeeklySteps: 0, userName: window.currentUserName, lastUpdated: new Date() };

                    // Ensure userName is always up-to-date
                    userStepsData.userName = window.currentUserName;

                    // Update daily steps
                    userStepsData.dailySteps[todayDate] = (userStepsData.dailySteps[todayDate] || 0) + stepsToAdd;
                    
                    // Recalculate total weekly steps
                    const startOfWeek = getStartOfWeek();
                    let newTotalWeeklySteps = 0;
                    for (const date in userStepsData.dailySteps) {
                        const day = new Date(date);
                        if (day >= startOfWeek) {
                            newTotalWeeklySteps += userStepsData.dailySteps[date];
                        } else {
                            // Optionally clean up old daily entries
                            delete userStepsData.dailySteps[date];
                        }
                    }
                    userStepsData.totalWeeklySteps = newTotalWeeklySteps;
                    userStepsData.lastUpdated = new Date();

                    await setDoc(stepsDocRef, userStepsData, { merge: true });
                    stepsInput.value = '';
                    stepMessage.textContent = `Added ${stepsToAdd} steps!`;

                } catch (e) {
                    console.error("Error adding steps: ", e);
                    stepMessage.textContent = "Error adding steps. Please try again.";
                }
            });

            // Listen for real-time step updates for current user and leaderboard
            let unsubscribeSteps = null; // To store the unsubscribe function
            function listenForStepUpdates() {
                if (!window.db || !window.currentUserId) {
                    console.warn("Firestore not ready for step updates.");
                    return;
                }

                if (unsubscribeSteps) {
                    unsubscribeSteps(); // Unsubscribe from previous listener if exists
                }

                const challengeCollectionRef = collection(window.db, `artifacts/${__app_id}/public/data/stepChallenges`);
                const q = query(challengeCollectionRef);

                unsubscribeSteps = onSnapshot(q, (snapshot) => {
                    const allUsersSteps = [];
                    const startOfWeek = getStartOfWeek();
                    let currentUserTotalSteps = 0;
                    let currentUserDailySteps = 0;
                    const todayDate = formatDate(new Date());

                    snapshot.forEach((doc) => {
                        const data = doc.data();
                        const userId = doc.id;
                        let weeklySteps = 0;

                        // Aggregate weekly steps for each user
                        if (data.dailySteps) {
                            for (const date in data.dailySteps) {
                                const day = new Date(date);
                                if (day >= startOfWeek) {
                                    weeklySteps += data.dailySteps[date];
                                }
                            }
                        }

                        allUsersSteps.push({
                            userId: userId,
                            userName: data.userName || `User ${userId.substring(0, 4)}`, // Fallback name
                            totalWeeklySteps: weeklySteps
                        });

                        // Find current user's steps
                        if (userId === window.currentUserId) {
                            currentUserTotalSteps = weeklySteps;
                            currentUserDailySteps = data.dailySteps ? (data.dailySteps[todayDate] || 0) : 0;
                        }
                    });

                    // Update current user's display
                    myTotalSteps.textContent = currentUserTotalSteps.toLocaleString();
                    myDailySteps.textContent = `Today: ${currentUserDailySteps.toLocaleString()} steps`;

                    // Sort leaderboard and display
                    allUsersSteps.sort((a, b) => b.totalWeeklySteps - a.totalWeeklySteps);
                    leaderboardList.innerHTML = ''; // Clear existing list

                    if (allUsersSteps.length === 0) {
                        leaderboardList.innerHTML = '<p class="text-gray-500">No steps recorded yet. Be the first!</p>';
                    } else {
                        allUsersSteps.forEach((user, index) => {
                            const isCurrentUser = user.userId === window.currentUserId;
                            const listItem = document.createElement('div');
                            listItem.className = `flex justify-between items-center p-2 rounded-lg ${isCurrentUser ? 'bg-purple-100 font-semibold' : 'bg-gray-50'}`;
                            listItem.innerHTML = `
                                <span>${index + 1}. ${user.userName} ${isCurrentUser ? '(You)' : ''}</span>
                                <span>${user.totalWeeklySteps.toLocaleString()} steps</span>
                            `;
                            leaderboardList.appendChild(listItem);
                        });
                    }
                    leaderboardLoading.classList.add('hidden');

                }, (error) => {
                    console.error("Error listening to step updates:", error);
                    leaderboardList.innerHTML = '<p class="text-red-500">Error loading leaderboard.</p>';
                });
            }

            // Function to switch between main views
            function switchView(view) {
                // Hide all main views first
                landingPageView.classList.add('hidden'); // New
                authView.classList.add('hidden'); // New
                dashboardView.classList.add('hidden');
                checkInView.classList.add('hidden');
                companionView.classList.add('hidden');
                calmSpaceView.classList.add('hidden');
                stepChallengeView.classList.add('hidden');
                settingsView.classList.add('hidden');
                profileSettingsView.classList.add('hidden');
                dataPrivacySettingsView.classList.add('hidden'); // New
                privacyConsentView.classList.add('hidden'); // Ensure initial consent modal is hidden

                // Deactivate all nav links
                navDashboard.classList.remove('active');
                navCheckIn.classList.remove('active');
                navCompanion.classList.remove('active');
                navCalmSpace.classList.remove('active');
                navStepChallenge.classList.remove('active');
                navSettings.classList.remove('active');

                // Logic to handle authenticated vs. unauthenticated access
                const protectedViews = ['dashboard', 'check-in', 'companion', 'calm-space', 'step-challenge', 'settings', 'profile-settings', 'data-privacy-settings'];

                if (protectedViews.includes(view) && !window.isAuthenticated && window.auth.currentUser && window.auth.currentUser.isAnonymous) {
                    // If trying to access a protected view as an anonymous user, redirect to auth page
                    window.location.hash = '#auth';
                    return;
                } else if (protectedViews.includes(view) && !window.isAuthenticated && !window.auth.currentUser) {
                     // If trying to access a protected view and not authenticated at all, redirect to auth page
                    window.location.hash = '#auth';
                    return;
                }


                // Show the requested view and activate its nav link
                if (view === 'landing-page') {
                    landingPageView.classList.remove('hidden');
                    // No nav link active for landing page
                    mobileNav.value = ''; // Clear mobile nav selection
                } else if (view === 'auth') {
                    authView.classList.remove('hidden');
                    // No nav link active for auth page
                    mobileNav.value = ''; // Clear mobile nav selection
                } else if (view === 'dashboard') {
                    dashboardView.classList.remove('hidden');
                    navDashboard.classList.add('active');
                    mobileNav.value = 'dashboard';
                    // Start listening for dashboard updates when dashboard is active
                    if (window.isAuthReady) {
                        listenForDashboardUpdates();
                    } else {
                        document.addEventListener('firebaseAuthReady', listenForDashboardUpdates, { once: true });
                    }
                } else if (view === 'check-in') {
                    checkInView.classList.remove('hidden');
                    navCheckIn.classList.add('active');
                    mobileNav.value = 'check-in';
                    currentCheckInStep = 0; // Reset to first step
                    // Reset checkInScores to initial values or empty for a fresh check-in
                    checkInScores.wellbeing = checkInQuestions[0].initial;
                    checkInScores.safety = checkInQuestions[1].initial;
                    checkInScores.inclusion = checkInQuestions[2].initial;
                    checkInScores.reflection = "";
                    renderCheckInStep();
                } else if (view === 'companion') {
                    const consentGiven = localStorage.getItem('companionConsent');
                    if (consentGiven === 'true') {
                        companionView.classList.remove('hidden');
                        navCompanion.classList.add('active');
                        mobileNav.value = 'companion';
                    } else if (consentGiven === 'false') {
                        alert("The Companion feature is disabled as you have declined the privacy terms. You can re-enable it by going to Settings > Privacy Settings.");
                        navCompanion.classList.add('disabled');
                        window.location.hash = '#dashboard'; // Redirect to dashboard
                    } else {
                        // If consent is neither true nor false (i.e., null), show the initial consent modal
                        privacyConsentView.classList.remove('hidden');
                        navDashboard.classList.add('active'); // Keep dashboard active while modal is open
                        mobileNav.value = 'dashboard';
                    }
                } else if (view === 'calm-space') {
                    calmSpaceView.classList.remove('hidden');
                    navCalmSpace.classList.add('active');
                    mobileNav.value = 'calm-space';
                    updateCalmSpaceGreeting();
                } else if (view === 'step-challenge') {
                    stepChallengeView.classList.remove('hidden');
                    navStepChallenge.classList.add('active');
                    mobileNav.value = 'step-challenge';
                    
                    if (window.isAuthReady && !window.currentUserName) {
                        userNameInputSection.classList.remove('hidden');
                        stepChallengeContent.classList.add('hidden');
                    } else if (window.isAuthReady && window.currentUserName) {
                        userNameInputSection.classList.add('hidden');
                        stepChallengeContent.classList.remove('hidden');
                        listenForStepUpdates();
                    } else {
                        document.addEventListener('firebaseAuthReady', () => {
                            if (!window.currentUserName) {
                                userNameInputSection.classList.remove('hidden');
                                stepChallengeContent.classList.add('hidden');
                            } else {
                                userNameInputSection.classList.add('hidden');
                                stepChallengeContent.classList.remove('hidden');
                                listenForStepUpdates();
                            }
                        }, { once: true });
                    }
                } else if (view === 'settings') {
                    settingsView.classList.remove('hidden');
                    navSettings.classList.add('active');
                    mobileNav.value = 'settings';
                } else if (view === 'profile-settings') {
                    profileSettingsView.classList.remove('hidden');
                    mobileNav.value = 'settings'; // Keep mobile nav on settings
                } else if (view === 'data-privacy-settings') {
                    dataPrivacySettingsView.classList.remove('hidden');
                    mobileNav.value = 'settings'; // Keep mobile nav on settings
                    updateCompanionConsentStatusDataPrivacy(); // Update status when view opens
                }
            }

            // Handle hash changes for navigation
            window.addEventListener('hashchange', () => {
                const hash = window.location.hash.substring(1); // Remove '#'
                switchView(hash || 'landing-page'); // Default to landing-page if hash is empty
            });

            // Initial view load based on hash or default to landing page
            const initialHash = window.location.hash.substring(1);
            if (initialHash) {
                switchView(initialHash);
            } else {
                switchView('landing-page');
            }

            // Initial setup on page load
            loadSettings(); // Load settings preferences
            // Check initial consent state for Companion nav link
            const initialConsent = localStorage.getItem('companionConsent');
            if (initialConsent === 'false') {
                navCompanion.classList.add('disabled');
            }

            // Landing page button listeners
            startCheckInLandingBtn.addEventListener('click', () => {
                window.location.hash = '#auth';
            });

            viewDashboardLandingBtn.addEventListener('click', () => {
                window.location.hash = '#auth'; // Always go through auth for dashboard access
            });
        });
    </script>
</body>
</html>
2000 30,000 2030 Lines long is my code my code
